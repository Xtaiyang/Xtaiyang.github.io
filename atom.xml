<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunshine</title>
  
  
  <link href="https://xtaiyang.github.io/atom.xml" rel="self"/>
  
  <link href="https://xtaiyang.github.io/"/>
  <updated>2025-01-12T06:31:21.105Z</updated>
  <id>https://xtaiyang.github.io/</id>
  
  <author>
    <name>Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>互联网公司技术岗实习/求职经验（实习内推+简历+面试+offer篇）</title>
    <link href="https://xtaiyang.github.io/posts/b5bab9.html"/>
    <id>https://xtaiyang.github.io/posts/b5bab9.html</id>
    <published>2024-11-13T13:27:14.000Z</published>
    <updated>2025-01-12T06:31:21.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网公司技术岗实习-求职经验（实习内推-简历-面试-offer篇）"><a href="#互联网公司技术岗实习-求职经验（实习内推-简历-面试-offer篇）" class="headerlink" title="互联网公司技术岗实习/求职经验（实习内推+简历+面试+offer篇）"></a><a href="https://www.cnblogs.com/joyeecheung/p/5003980.html">互联网公司技术岗实习/求职经验（实习内推+简历+面试+offer篇）</a></h1><p>找工作的事基本尘埃落定了，打算把这大半年来积累的经验写下来，基本都是我希望当年找实习的时候自己能够知道的东西，帮师弟师妹们消除一点信息不平等，攒攒RP~ 不要像我当年那样，接到电话吓成狗，没接到电话吓成狗，一点小事就惶惶不可终日，面试完疑神疑鬼啥的……这些大部分都是像我一样经历过大半年实习求职经历后就会知道的常识，但是还在学校的师弟师妹们就未必知道了，所以感觉还是有必要写写，给后人栽个树好乘凉。</p><p>因为个人经历的缘故，会多讲一些阿里相关的东西，另外有一些东西是跟其他实习生交流过之后了解到的，也一并写下来。另外因为有一次比较特殊的实习转正时内部转岗的经历，当时在网上几乎没找到多少相关信息，以后有空也会写写过程帮助后来人了解一下。</p><p><strong>事先写一句：这篇东西不是什么应聘宝典/秘籍之类的，只是介绍一下一般在校生不了解的相关信息而已。我一直信奉的原则是，应聘是双向选择的过程，现在互联网的技术岗位对于有能力的人一直处于供不应求的状态，所以只要你有干货，技术栈有合拍的地方，自会有赏识你的人，只要确保自己的亮点不被埋没就好了，没必要生捏硬造出什么亮点出来，最后更可能坑的是自己。</strong></p><h2 id="关于实习招聘"><a href="#关于实习招聘" class="headerlink" title="关于实习招聘"></a>关于实习招聘</h2><p>进互联网公司实习，主要途径分为内推和校招两种。内推也就是公司员工把你的信息录入到内部系统进行推荐，校招则是公司来学校开宣讲会或者通过其他方式宣传这次招聘，然后你再去公司举办的招聘会（一般开在酒店）面试。</p><p>一般来说，招聘流程如下：</p><ul><li>内推：员工录入你的信息到公司招聘系统 -&gt; 筛选简历 -&gt; 面试 -&gt; 发 offer</li><li>校招：通过宣讲会或者网申等方式投递简历 -&gt; 筛选简历 -&gt; 笔试 -&gt; 面试 -&gt; 发 offer</li></ul><p>一般来说，内推可以跳过笔试，并且省去很多流程上的麻烦，而且内推一般先于校招开始，机会更多，所以能内推的最好尽量内推。这年头内推非常容易，因为如果被推荐的人通过面试，推荐他的人会得到公司的奖励（或者推荐量到一定程度有奖励），所以员工大多数也比较乐意发内推。只要你有认识的人在你感兴趣的公司工作，都可以去问问。就算没有认识的人，知乎、微博、V2EX、高校bbs等地都可以比较容易地找到各家公司的员工来收内推的信息（貌似有不少人以为推荐人和被推荐人一定要认识……其实很多时候推荐人并不在意他不认识你，因为他推进去之后你的简历还是会被筛一遍的）。</p><p>各大互联网公司的实习内推一般在 2 月底 ~ 4 月，校招在 4 月 ~ 6 月，如果坑没填够还会有补录。内推和校招的申请 deadline 一般是公司定的，过了 deadline 可能 leader 也没有太多办法（当然这不是绝对的，要看情况），所以最好在 3 月左右就开始多刷刷各种渠道，不要误了 deadline，生出不必要的麻烦。</p><h2 id="关于内推"><a href="#关于内推" class="headerlink" title="关于内推"></a>关于内推</h2><p>一般来说，大一点的公司会有自己的招聘系统，内推的时候员工一般会要你的简历，然后他再将一些信息填写进这个招聘系统。如果你有明确想去的团队，或者你准备去的就是推荐人所在的团队，就会指定相关的人来负责，处理会快一些。如果没有，那么一般是推到一个事业群或者大部门，然后想招人的 leader 来看看，遇到感兴趣的简历就捡走，这个过程可能会稍微长一些。</p><p>注意大公司一般有很多事业群/部门，一般内推了其中一个就不能再推第二个了（举个例子，阿里有淘宝、天猫、阿里云、B2B、蚂蚁金服等等多个 BU，你内推了其中一个就不能推另一个。腾讯和百度也有类似的锁定简历的情况），通常这是系统定死的，如果想改会很麻烦，所以内推前一定要慎重（我就被坑过……）。主要是大公司内各个团队其实招人时处于类似竞争的关系，一个团队看中的人当然不能随便又被另一个团队抢走。</p><h2 id="关于简历"><a href="#关于简历" class="headerlink" title="关于简历"></a>关于简历</h2><p>看你简历的人一般有两种：HR 或者要招人的团队 leader，所以在制作简历的时候两种人都要考虑到。对于 HR 来说，联系方式、教育经历比较重要。对于团队 leader 来说，项目经验、技能、获奖情况比较重要（一些团队还会看重 GitHub 之类的公开信息）。</p><p>怎样写一个好的简历已经有非常多的讨论，这里我就不啰嗦了，只说一些个人经验：</p><ol><li>通常来说面试官不会花很多时间看你的简历，而且很多是面试的时候再看的，所以重点一定要突出。比如依照<a href="https://en.wikipedia.org/wiki/Golden_Triangle_(Internet_Marketing">黄金三角</a>)理论，把你最想让他看到的东西放在左上角，以及运用加粗、颜色对比、字体等方式强调你想强调的东西。根据个人经验，放到简历下面的东西有可能直到面试结束他都不会看一眼（T_T）。</li><li>简历格式最好是 PDF，如果有在线简历的话更方便传播（GitHub Pages 什么的弄一个很快哒），而且你还可以用 Google Analytics 之类的工具分析你的简历浏览情况哦~（比如你看到有很多来自杭州的访问量的时候，就知道有很大几率被阿里的人看到了） 另外个别公司现场面还是需要纸质简历的，如果你不打算彩色打印但是简历又是彩色的话，要记得考虑一下简历转换成黑白之后的打印效果（比如淡色背景可能打出来一片糊！= =）</li><li>简历越早准备越好（我是春节准备的），多参考一下别人的简历，如果对设计感兴趣的可以去 dribbble 之类的地方搜搜 resume 之类的关键词，看多了就知道哪些该做哪些不该做了。</li></ol><p>另外因为参与过一次内推，说一下看到的一些雷区：</p><ol><li>不要写和你的岗位完全无关的经验……虽然不是每个面试官都反感，不过如果没什么亮点的话他会觉得你没有干货，写这些纯在凑数。</li><li>简历的外观和信息排布虽然能帮助你的能力得到更好的展现，但是最重要的是你的能力，不是你的简历，不要本末倒置……如果没有干货，简历再好看，懂行的人也能识破的。</li></ol><h2 id="关于面试"><a href="#关于面试" class="headerlink" title="关于面试"></a>关于面试</h2><p>如果你面的公司不在你所在的城市，一般会先电面。电面可能是打电话，也可能是 Skype、QQ（对，腾讯的……）、旺旺（阿里的）之类。一般有两种情况：HR打来约时间，或者是一面面试官直接打过来。后者的话可能先问问你有没有时间直接开始，没有的话再约（这种情况很正常，不用担心）。</p><p>有些公司会在电面之后希望能够现场面，需要你去他所在的城市。有些公司可能全程电面（比如阿里的内推）。一般内推的会有电面，而走校招的一般直接现场面。电面的话来来去去约双方有空的时间，可能整个流程会很久（两三个星期），而现场面可能一天就都面完了……</p><p>一般来说，技术岗面试会有 2 ~ 3 面或以上。就互联网公司来说，最常见的情况是：一面面试官通常是你进去之后的导师，二面面试官是你进去之后的直接主管，三面面试官是主管的主管。另外还可能有交叉面，也就是其他部门的 leader 来面你，重复检验一下你的能力。即使不是这种排序，基本来说，面试你的人也是你未来的同事，少说也是一个大部门的，很有可能是你进去之后就工位在你方圆几十米以内。另外这个安排不是绝对的，因为你的同事都是干活的程序员，可不是专职搞招聘的，可能招人的时候他们正好特别忙，会拉其他团队的人帮手看看之类的，也就会出现传说中的面试的时候遇到了貌似根本不懂你这个领域的面试官……</p><p>这几面基本都是问的技术问题，一面是你的直接同事所以会问的比较细比较基础，二面开始就没那么细节了，因为主管们很多都已经不直接敲代码而是负责架构、把握整体技术方向，所以更多是问的一些理解和经验，主要是开放式问题。还有，由于面试官通常是你的未来同事，所以肯定多少会注意你本人是不是特别奇葩，毕竟大家以后低头不见抬头见啊……另外大公司都会有 HR 面，主要是看看你性格正不正常之类的。</p><p>一般公司的 HR 只是提供建议供面试官参考，但是阿里的 HR 面比较特殊。阿里有一种叫 HRG 的职位，俗称“政委”，HR 面的时候面试官就是这个团队的 HRG，在招人的时候是有一票否决权的。一般 HRG 主要看看你是不是有所谓的“阿里味”，符不符合阿里的价值观，想知道是啥的可以搜索“阿里 六脉神剑”。虽然在知乎上 HRG 被描述得很恐怖，不过就个人经历过的四个 HRG 来看，好像并没有什么特别的，都是正常的大哥哥大姐姐……HR 面的时候也跟其他公司的 HR 问的差不多，基本就是有什么兴趣爱好啊，家里对工作地点有什么看法啊，觉得自己有什么优缺点啊，怎么学习技术的啊之类的问题。要说有什么特别的，大概就是我以为 HRG 不懂技术，所以回答问题的时候特意解释得外行人比较能听懂，结果说着说着发现貌似她很懂啊 0-0……包括后来我转岗的时候才知道 HRG 为了能够让我充分发挥自己的能力，在安排我的岗位的时候还是费了不少心思的，也为我的职业发展提了很多建议，作为一个孤身跑来杭州的家伙，发现在这个人生地不熟的地方有个温柔的大姐姐这么为自己着想，心里还是很感动的。</p><p>有些公司有专门的 HR 负责流程事宜，那么一般是 HR 来跟你约面试时间，如果面试官没按时跟你联络，他会帮你解决，而且会发邮件和短信提醒你面试时间。如果没有专门的 HR 负责（比如阿里= =），那么从头到尾基本都是面试官直接跟你联络。但是前面也说了面试官可能就是你的未来同事，毕竟不是专职 HR，可能组织上没有那么缜密，漏打电话或者开个会没按时联络你也是很正常的。遇到这种情况耐心等等就行了，如果时间太长再去找人（比如内推你的人、校招客服）反馈一下，免得人家是真的直接把你给忘了……</p><p>基本上所有的面试都是这种流程：自我介绍 -&gt; 问一些基础问题（可能没有）-&gt; 出题给你做（可能没有）-&gt; 依据你的简历问一些你写在上面的东西 -&gt; 你有什么要问我的吗？</p><p>如果面试官没有事先看过你的简历，那他就会在你自我介绍的时候一边听一边扫一眼简历。自我介绍嘛，如果像我这样中规中矩的就是说一下我叫XXX，在XXX大学读XXX专业，现在大X，我以前在 XXX 做过 XXX，XXX 做过 XXX……当然也有人喜欢自由发挥的，不过面试官貌似一般不会特别在意你说什么因为这段时间他们都在看简历……</p><p>接下来基本就是面试官问，你回答，然后这样答答答答好多轮……个人经验是，不懂的东西不要装懂，不然如果他越问越深你会跪的。如果他出题给你做的话，关键的是展示你思考的过程（所以最好不要冷场，就算没有瞬间想出答案，也要把你内心的自言自语说出来），结果未必是最重要的（当然答出来总好过答不出）。如果他问你的东西你答不上来，也不一定要直接表示我不懂，可以说说你了解的相关的知识。</p><p>总之面试的要点就是，你不懂的没必要硬装，但是你懂的东西一定要尽量展现给他。说到底，只要让他能够尽量全面客观地评价你这个人就够了，面试官自会判断你是不是他想招的人，如果大家不合拍，你硬靠装逼拿一个 offer 也没什么意思，就算不小心进去了，也可能感觉日狗……</p><p>面试的最后一个问题基本上都是“你还有什么要问我的吗？”（我还真没见过最后一个问题不是这个的面试官23333），网上的面经很多是教你怎样再借机表现一下自己的，不过个人觉得比较有用的问题是：</p><ol><li>我进去之后会做什么？团队是做什么东西的（业务是什么）？内部项目还是外部项目？偏基础还是偏业务（简单粗暴地说，做基础就是写给程序员用的东西，做业务就是写给用户用的东西）？技术氛围怎么样？主要用到什么技术？有什么开源产出吗？你们做 code review 吗？你们写单元测试吗？等等等等…… 这些问题是帮助你拿到 offer 之后决定要不要接的，如果你投的不止一家公司，而且到时候拿到的 offer 势均力敌，这个信息就十分有用了。</li><li><p>就我之前的表现来看，你觉得我的优缺点在哪里？这个问题可以侧面打探出他对你的评价，而且可以帮助你给自己查漏补缺。</p><p>大一点的公司一般会有个外部的招聘系统，面试结果可以在上面查到。2015年阿里招实习生的时候是可以直接看到每一面的通过情况的。</p></li></ol><h2 id="关于接-offer"><a href="#关于接-offer" class="headerlink" title="关于接 offer"></a>关于接 offer</h2><p>一般 offer 有口头和书面两种。有时候要你答应了口头 offer 才能拿到书面 offer（我遇到的腾讯 SNG 是这样）。一般来说拿了 offer 又不去的，会在正式校招（这里的校招指的是招聘应届生做正式员工）的时候再联络并且会跳过一些流程，而接了 offer 又不去的……可能会被拉黑……所以不要随便毁约，坑公司又坑自己。</p><p>（我见过对接 offer 这事最不在意的貌似是阿里，如果不接实习 offer 的话秋季校招的时候还可以走绿色通道直接进终试……）</p><p>对于选择 offer，个人的一点看法是项目/团队 &gt;　公司。特别是在大公司里，不同事业群、不同团队、不同项目，做的事情、做事风格可能天差地别。没有在大公司呆过的同学特别容易以为，大公司里很多东西是统一的……然而互联网公司很多时候隔组如隔山，你听说到的某个团队的信息，是不能随意套到另一个团队的身上的，特别是在这两个团队所属不同部门的时候，可能他们的技术栈和行事流程根本是两个次元。所以面试的时候那最后一个问题就很有用了，你可以直接把自己想问的都给问了，千万不要浪费。选择 offer 的时候，先衡量一下到底哪个团队才是你想进去做事，能让你学到东西的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;互联网公司技术岗实习-求职经验（实习内推-简历-面试-offer篇）&quot;&gt;&lt;a href=&quot;#互联网公司技术岗实习-求职经验（实习内推-简历-面试-offer篇）&quot; class=&quot;headerlink&quot; title=&quot;互联网公司技术岗实习/求职经验（实习内推+简历+</summary>
      
    
    
    
    
    <category term="找工作" scheme="https://xtaiyang.github.io/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>注重实效的哲学程序员修炼之道第一章阅读心得</title>
    <link href="https://xtaiyang.github.io/posts/aaf337f2.html"/>
    <id>https://xtaiyang.github.io/posts/aaf337f2.html</id>
    <published>2024-11-07T02:56:37.000Z</published>
    <updated>2025-01-12T06:31:21.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注重实效的哲学——程序员修炼之道第一章阅读心得"><a href="#注重实效的哲学——程序员修炼之道第一章阅读心得" class="headerlink" title="注重实效的哲学——程序员修炼之道第一章阅读心得"></a>注重实效的哲学——程序员修炼之道第一章阅读心得</h1><blockquote><p>强烈推荐这本书《程序员修炼之道——从小工到专家》 <a href="https://book.douban.com/subject/5387402/">https://book.douban.com/subject/5387402/</a></p></blockquote><h2 id="注重实效的程序员的特征"><a href="#注重实效的程序员的特征" class="headerlink" title="注重实效的程序员的特征"></a>注重实效的程序员的特征</h2><p>他们处理问题、寻求解决方案时的态度、风格、哲学。</p><ol><li><strong>能越出直接问题去思考更深层次的东西</strong>。总是设法把问题放到更大的语境中，设法注意更大的图景，以最小代价达到最佳效果。</li><li><strong>项目代码的维护，对自己的代码负责，将项目代码保持整洁优雅</strong>。</li><li><strong>善于发现变化、接受变化、自我改变</strong>。能克服惰性，在改变中，提高效率，自我提升。</li><li><strong>注重积累自己的知识资产</strong>。定期读好书、学新知识、温故总结。</li><li><strong>更好的和他人交流</strong>。工作生活中我们会有快一半的时间用于交流，我们应该在交流中学习，提高交流的效率，在交流中收获良师益友。</li></ol><p>以上我从书中总结的五点非常重要，下面会结合实际情况详细分析、并找到如何做的方案。</p><p>以及个人认为时间的规划也很重要，长期安排和短期安排都很重要，附 Geek 工作效率图</p><h2 id="项目代码的维护"><a href="#项目代码的维护" class="headerlink" title="项目代码的维护"></a>项目代码的维护</h2><blockquote><p>在所有弱点中。最大的弱点就是害怕暴露弱点。</p></blockquote><h3 id="软件的熵"><a href="#软件的熵" class="headerlink" title="软件的熵"></a>软件的熵</h3><p>当软件在无序增长时，也就是熵增加，软件趋向于腐烂。</p><p>但是显而易见的，有两种项目：一种随着开发，软件的熵越来越高，有着指数般的成长趋势，项目逐渐腐烂；而另一种，随着开发，软件的熵得到了很好的控制，线性般的成长趋势，甚至就好像有一个上限值一样，成长趋势越来越慢，几乎停下来。</p><p>那么是什么造成了这样的差异呢？</p><h3 id="破窗理论"><a href="#破窗理论" class="headerlink" title="破窗理论"></a>破窗理论</h3><blockquote><p>在市区，有些建筑漂亮整洁，而另一些却是破败不堪堆满垃圾。根据研究者调查发现了一种触发机制，一种很快能将整洁、完整的建筑变为破败的废弃物的机制。</p><p>破窗户</p><p>一扇破窗户，只要有那么一段时间不修理，就会给建筑的居民带来<strong>废弃感</strong>。很快有一扇窗户破了，人们开始乱扔垃圾、乱涂乱画，严重的结构损坏开始了，这个时候废弃感成为了现实，每个人都感受得到。</p><p>破窗理论启发了纽约和各大城市的警察部门，他们对一些轻微的按键严加处理，以防止大案的发生，这非常奏效。</p></blockquote><p>所以我们不要留着破窗户（低劣的设计、错误的决策、糟糕的代码）不修，发现一个就应该修一个。</p><blockquote><p>我们看到过整洁、运行良好的系统，一旦窗户开始破裂，就相当迅速的恶化。</p><p>如果你发现自己在有好些破窗户的项目里工作，会很容易产生这样的想法：“这些代码的其余部分也是垃圾，我只要照着做就行了。”项目在这之前是否一致很好，并没有任何关系。比如一辆飞起的轿车放了一星期，无人理睬，而一旦有一扇窗户被打破，数小时车上的设备就会被抢夺一空。</p><p>同样的道理，如果你发现你所在的团队和项目的代码十分漂亮——编写整洁、涉及良好并且很优雅——你就很可能会格外注意不去把它弄脏，因为你不会想成为第一个弄脏东西的人。</p></blockquote><p>所以修复破窗非常非常重要，见到一个就立马修复它。</p><h2 id="足够好的软件"><a href="#足够好的软件" class="headerlink" title="足够好的软件"></a>足够好的软件</h2><ol><li>让用户参与权衡</li><li>知道何时止步（编程就像画画，不要过度修饰和过于求精）</li></ol><h2 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h2><p>温水煮青蛙的事常常发生在我们生活中，随着时间的推移，任何事都会有变化，假如我们不去发现变化、并做出改变来应对，我们其实就和青蛙没有什么区别。</p><ol><li>我们要克服惰性，做变化的催化剂，用一些改变的成果(demo)给团队惊喜，和团队宣传变化后的大图景（new future），团结团队迎接变化。</li><li>变化更是挑战，正面迎战挑战，可以获得提高效率、提升自我的成果。</li></ol><h2 id="注重积累自己的知识资产"><a href="#注重积累自己的知识资产" class="headerlink" title="注重积累自己的知识资产"></a>注重积累自己的知识资产</h2><h3 id="经营管理知识资产"><a href="#经营管理知识资产" class="headerlink" title="经营管理知识资产"></a>经营管理知识资产</h3><blockquote><p>知识是有时效性的资产</p></blockquote><p>就好比一百多年前最厉害的武器 火枪大炮，在如今早已被AK、导弹所替代，更何况在当今这个每过十年都会有翻天覆地变化的时代，旧知识的价值的降低速度非常之快。</p><p>所以我们应该善于经营管理自己的知识资产，我认为更重要的是</p><ol><li>新知识和旧知识并不矛盾，应该携手共进，知识是相通的。</li><li>培养核心学习能力。学习知识的核心，而不是只学习知识的 形。</li><li>培养学习习惯、终身学习。</li></ol><p>书中的观点：</p><ol><li>定期投资</li><li>多元化</li><li>管理风险；低买高卖。</li></ol><p>最重要的是，<strong>定期为你的知识资产投资</strong></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>制定目标并执行是一个非常好的定期投资方式。</p><p>书中举例的目标：</p><ol><li>每年至少学一种新的语言</li><li>每季度阅读一本技术书籍，也要阅读非技术书籍</li><li>学习新的思想</li><li>跟上技术潮流，</li><li>试用不同的环境、工具。</li></ol><p>我的目标：</p><ol><li>跟进社区技术发展，关注社区文章、动态</li><li>写一篇技术文章</li><li>看一本技术书籍</li><li>做一次技术分享</li><li>在技术上，给自己以新的领域的挑战</li></ol><h2 id="高效的获取知识"><a href="#高效的获取知识" class="headerlink" title="高效的获取知识"></a>高效的获取知识</h2><h3 id="学习机会"><a href="#学习机会" class="headerlink" title="学习机会"></a>学习机会</h3><ol><li>解决问题</li><li>和厉害的人一起交流自己解决不了的问题</li><li>让自己无聊的时候（排队、坐车）有东西可以学，强烈推荐 pocket</li></ol><h3 id="谷歌、问问题"><a href="#谷歌、问问题" class="headerlink" title="谷歌、问问题"></a>谷歌、问问题</h3><ol><li>首先要明确自己的问题是什么</li><li>精确地的描述问题</li><li>锲而不舍、不断思考</li></ol><h2 id="高效的交流"><a href="#高效的交流" class="headerlink" title="高效的交流"></a>高效的交流</h2><ol><li>知道你真正想要什么</li><li>了解你的听众，知道他想听什么，能听懂什么</li><li>选择好时机</li><li>选择风格：简短？正式？随意？详细？</li><li>让听众参与、做倾听者</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注重实效的哲学——程序员修炼之道第一章阅读心得&quot;&gt;&lt;a href=&quot;#注重实效的哲学——程序员修炼之道第一章阅读心得&quot; class=&quot;headerlink&quot; title=&quot;注重实效的哲学——程序员修炼之道第一章阅读心得&quot;&gt;&lt;/a&gt;注重实效的哲学——程序员修炼之道第</summary>
      
    
    
    
    
    <category term="感悟" scheme="https://xtaiyang.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>让事情去发生</title>
    <link href="https://xtaiyang.github.io/posts/b5babe99.html"/>
    <id>https://xtaiyang.github.io/posts/b5babe99.html</id>
    <published>2024-11-07T02:56:37.000Z</published>
    <updated>2025-01-12T06:31:21.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关10000小时定律"><a href="#有关10000小时定律" class="headerlink" title="有关10000小时定律"></a>有关10000小时定律</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>知乎上看到了一篇有关10000小时定律的文章写得非常好，纠正了我们以前的客观认识，并且写的很深入，记记笔记。<br><a href="https://www.zhihu.com/question/21655527/answer/44515153">https://www.zhihu.com/question/21655527/answer/44515153</a></p><p>我一直到相信一句话：</p><blockquote><p>就目前我们努力的程度，远未到拼天赋的地步。</p></blockquote><p>所以非常信奉10000小时来着，但是以前认识不深。因为我也觉得肯定有方法学的，不仅仅是10000小时，这个笔记很重要。</p><h2 id="正确认识10000小时定律"><a href="#正确认识10000小时定律" class="headerlink" title="正确认识10000小时定律"></a>正确认识10000小时定律</h2><h3 id="刻意训练"><a href="#刻意训练" class="headerlink" title="刻意训练"></a>刻意训练</h3><ol><li>需要刻意的训练。</li><li>精神动力。（刻意训练的目标，就是要让自己成为顶尖级的专家，要有为此而努力的精神动力。）</li></ol><p>有心理学家认为，人们在做决策的时候，有两个判断系统，一个是经验系统，一个是分析系统。<br>经验系统可以自主运作，轻松舒适，占用精力少;而分析系统需要你对复杂的信息作出处理，并且进行理性的分析。</p><p>经验系统不断的为分析系统提供建议：印象、直觉、意愿以及态度。如果被采纳，那么印象和直觉就会转化为信仰，灵感也会相应的转变为自主行为。</p><ol><li>刻意训练就是训练你的经验系统。</li><li>需要你以更加严格刻苦的训练来突破水平的瓶颈，也就是不断跳出你的舒适区，挑战不擅长的的区域，突破瓶颈。</li></ol><blockquote><p>keep hungry keep foolish</p></blockquote><h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>刻意训练和普通的重复性训练一个很重要的不同在于反馈。</p><p>通俗的讲就是刻意训练 <strong>需要有人的指点</strong>。</p><p>这个反馈不是表扬，而是非常明确的指出你的问题所在。只有不断发现自己的问题，然后加以改正，你才可以获得提高。</p><h3 id="深刻理解事物的内部原理"><a href="#深刻理解事物的内部原理" class="headerlink" title="深刻理解事物的内部原理"></a>深刻理解事物的内部原理</h3><p>假如你所做的事情里，<strong>存在着一目了然、始终如一的因果关系</strong>，如果你反复做这件事，并且 <strong>不断从外界获取准确反馈，改进自己表现</strong>，那么总有一天你会成为一名专家。</p><p>所以，<strong>存在一目了然、始终如一的因果关系</strong>，也就是「一万小时定律」的先决条件</p><hr><blockquote><p> 最喜欢的句子:人与事情的发展, 事情的发展，总是会涉及到很多人，因此，个人的作用其实并不那么重要。让事情去发展，才能观察态势，才能改变它，才能影响它。不要把自己看得那么重要，包括自己在内，大家都是顺势而为，不改变态势，结果早就被决定了，有你没你都一样。所以，要想赢得比赛，就得做那个能影响比赛走势的人。不然的话，胜败已定，预测的再准又有什么用？</p></blockquote><h1 id="让事情去发生"><a href="#让事情去发生" class="headerlink" title="让事情去发生"></a>让事情去发生</h1><p>经验增长，并不完全是一件好事，</p><p>它也许会阻止本来可能发生的事情。</p><p>我们凭着经验来进行判断，</p><p>除非遇到完全相同的初始条件，</p><p>否则，这样的判断和随意猜测并没有什么不同。</p><p>我们踩到的坑多了，走路都战战兢兢，</p><p>一年被蛇咬，十年怕井绳。</p><p>如何打破经验主义的误区呢？</p><p>那就是，让事情去发生。</p><p>现实世界中的事情都是发展中的，</p><p>我们得有胆量让事情去发展，</p><p>然后掌控它的发展过程。</p><h2 id="把责任交出去"><a href="#把责任交出去" class="headerlink" title="把责任交出去"></a>把责任交出去</h2><p>篮球是一项团体运动，</p><p>在打篮球时，我们用的最多的是传接球。</p><p>可是，新手组织后卫往往无法理解，</p><p>球传出去以后，自己都无法掌控它了，</p><p>怎样组织这次进攻呢？</p><p>这类似于其他团队合作中的责任，</p><p>不敢把责任交出去，</p><p>担心别人做不好。</p><p>这样就无法达到默契的配合。</p><p>高手组织后卫怎样理解这件事情呢？</p><p>他首先会观察比赛的发展态势，</p><p>然后通过运球去影响这个态势的走向，</p><p>随后，把球顺着态势传出去。</p><p>这样的话，其他人的行为就会被态势所牵引。</p><p>比赛仍然在掌控中。</p><p>所以，难能可贵的是，</p><p>让比赛进行，把球传出去。</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>软件项目中，有前人总结的无数最佳实践，</p><p>不遵循它们，会犯很多前人已经犯过的错误。</p><p>然而，完全遵循它们，</p><p>又会抹杀掉未来的某些可能性。</p><p>每种方案都有适得其所的用处，</p><p>没有在任何情况下都不适用的方案，</p><p>不用它，其实很多人是因为没有真正掌握它。</p><p>很多方案是发展而来的，</p><p>到了那个境地，解决方案是显而易见的，</p><p>现在不用费尽心思，假定到时候很糟。</p><p>最佳实践的作用，应该是为了选择方向，</p><p>强行预测未来的细节，会担惊受怕，畏首畏尾。</p><p>你有胆量让不那么好的事情发生吗？</p><p>其实，不那么好与不那么坏，并没有什么区别。</p><h2 id="如何培养人"><a href="#如何培养人" class="headerlink" title="如何培养人"></a>如何培养人</h2><p>世界上最困难的就是把一件你很拿手的工作交给别人，</p><p>再眼睁睁看着他把事情搞砸，</p><p>而你却还能心平气和不发一言，</p><p>那是培养人。</p><p>世界上最容易的就是把一件你很拿手的工作交给别人，</p><p>再手把手地教他把事情做对，</p><p>不给他犯错机会，</p><p>那不是培养人，而是锻炼你自己。</p><p>——《有一种培养叫放手》</p><p>并不是每件事情按计划发生就是好的，</p><p>不同的发展轨迹，人们从中的收获也不同。</p><p>不让坏事情去发生，就不会身临其境，</p><p>没有把事情搞砸过，就不会反思过程。</p><h2 id="人与事情的发展"><a href="#人与事情的发展" class="headerlink" title="人与事情的发展"></a>人与事情的发展</h2><p>事情的发展，总是会涉及到很多人，</p><p>因此，个人的作用其实并不那么重要。</p><p>让事情去发展，才能观察态势，</p><p>才能改变它，才能影响它。</p><p>不要把自己看得那么重要，</p><p>包括自己在内，大家都是顺势而为，</p><p>不改变态势，结果早就被决定了，</p><p>有你没你都一样。</p><p>所以，要想赢得比赛，</p><p>就得做那个能影响比赛走势的人。</p><p>不然的话，</p><p>胜败已定，预测的再准又有什么用？</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Let things happen, let them win.</p><p>这不仅仅是一种洒脱的态度，</p><p>更多的是为了影响事情的整个发展过程。</p><p>如果说，新手从犯错，到学会提前意识到错误，是一个进步，</p><p>那么老手从丰富的经验，到违反经验的大胆尝试，更是一个进步。</p><p>新手，通常把方案静态的理解为当前场景的解，</p><p>而高手，更能看到事情的发展过程，</p><p>以及采取某个方案，会对事情发展产生什么影响。</p><p>让事情发生吧，我来做观众。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有关10000小时定律&quot;&gt;&lt;a href=&quot;#有关10000小时定律&quot; class=&quot;headerlink&quot; title=&quot;有关10000小时定律&quot;&gt;&lt;/a&gt;有关10000小时定律&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="感悟" scheme="https://xtaiyang.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>智能对话系统与知识融合技术探析</title>
    <link href="https://xtaiyang.github.io/posts/172b526.html"/>
    <id>https://xtaiyang.github.io/posts/172b526.html</id>
    <published>2024-09-30T16:00:00.000Z</published>
    <updated>2025-01-12T06:31:21.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="智能对话系统与知识融合技术探析"><a href="#智能对话系统与知识融合技术探析" class="headerlink" title="智能对话系统与知识融合技术探析"></a>智能对话系统与知识融合技术探析</h1><p>在人工智能快速发展的今天，智能对话系统和知识融合技术正在改变着我们与数据交互的方式。本文将深入探讨几种主流的对话系统方案，以及如何通过知识图谱实现多模态数据的智能融合。</p><h2 id="一、智能对话系统方案对比"><a href="#一、智能对话系统方案对比" class="headerlink" title="一、智能对话系统方案对比"></a>一、智能对话系统方案对比</h2><img src="/posts/172b526/830bafa743a98e0beefbe98a512a4676.png" class="" title="图片描述"><!-- ![830bafa743a98e0beefbe98a512a4676.png](https://img.picui.cn/free/2024/11/11/6731c2e8d6237.png) --><h3 id="1-NL2SQL：简单高效的查询助手"><a href="#1-NL2SQL：简单高效的查询助手" class="headerlink" title="1. NL2SQL：简单高效的查询助手"></a>1. NL2SQL：简单高效的查询助手</h3><p>NL2SQL就像一位敏捷的数据服务员，能够快速将自然语言转换为数据库查询语句。</p><p><strong>优势：</strong></p><ul><li>操作简单直观</li><li>响应迅速</li><li>适合日常查询任务</li></ul><p><strong>局限性：</strong></p><ul><li>难以处理复杂分析需求</li><li>无法识别数据间深层关系</li><li>在处理复杂SQL时可能出现性能瓶颈</li><li>存在潜在的安全隐患</li></ul><h3 id="2-DSL：专业的领域对话专家"><a href="#2-DSL：专业的领域对话专家" class="headerlink" title="2. DSL：专业的领域对话专家"></a>2. DSL：专业的领域对话专家</h3><p>DSL（Domain-Specific Language）是为特定领域设计的专门语言，就像各个领域的专家顾问。</p><p>它是一种为特定目的或特定领域设计的编程语言，与通用编程语言相比，DSL更加专注于解决特定类型的问题，因此其语法和词汇更加简洁和高效。</p><p><strong>特点：</strong></p><ul><li>语法和词汇更加简洁高效</li><li>专注于解决特定领域问题</li><li>强调声明性而非执行细节</li><li>将意图与实现分离</li></ul><p><strong>应用举例：</strong></p><ul><li>正则表达式：用于文本处理的DSL</li><li>配置文件：如Nginx配置，用于服务器行为定制</li></ul><p><strong>挑战：</strong></p><ul><li>需要大量训练和维护成本</li><li>开发周期较长</li><li>需要专业知识支持</li></ul><h3 id="3-指标库-ChatBI：预制菜单式对话"><a href="#3-指标库-ChatBI：预制菜单式对话" class="headerlink" title="3. 指标库+ChatBI：预制菜单式对话"></a>3. 指标库+ChatBI：预制菜单式对话</h3><p>这种方案像是一份详尽的数据分析菜单，用户可以直接选择所需指标。</p><p><strong>优势：</strong></p><ul><li>准确性高</li><li>权限管理便捷</li><li>响应速度快</li></ul><p><strong>局限性：</strong></p><ul><li>灵活性不足</li><li>难以处理预设指标之外的需求</li><li>动态分析能力受限</li></ul><hr><p>领域特定语言（DSL）的特点和价值：</p><ol><li><strong>内部DSL与普通代码的区别</strong>：<ul><li>内部DSL的代码更倾向于声明性质，而不是执行动作。这意味着内部DSL的代码更关注于“做什么”（What），而不是“怎么做”（How）。这种声明性质的代码强调的是意图，而不是具体的实现细节。</li></ul></li><li><strong>抽象级别的差异</strong>：<ul><li>“怎么做”涉及到具体的实现，是一种较低层次的抽象，关注的是技术细节和执行步骤。</li><li>“做什么”则是一种更高层次的抽象，关注的是目标和意图，而不是如何达成这些目标。</li></ul></li><li><strong>意图与实现的分离</strong>：<ul><li>内部DSL的一个关键特点是将意图（做什么）与实现（怎么做）分离。这种分离是内部DSL与普通程序代码的一个重要区别，也是良好设计的一个考虑因素。</li></ul></li><li><strong>DSL的关键元素</strong>：<ul><li>四个关键元素：计算机程序设计语言、语言性、受限的表达性和针对领域。</li><li>其中，语言性强调DSL需要有连贯的表达能力，即能够清晰地表达出使用者的意图。</li></ul></li><li><strong>代码的表达能力</strong>：<ul><li>程序员在编写代码时应该关注代码的表达能力，这是区分优秀程序员和普通程序员的一个因素。</li><li>普通程序员可能只关注功能的实现，而优秀的程序员会将代码的不同层次分离，将意图和实现分开，使得实现可以被替换。</li></ul></li><li><strong>学习内部DSL的价值</strong>：<ul><li>学习内部DSL的价值在于，即使不设计一个完整的内部DSL，学会将意图与实现分离也是对日常编码工作非常有价值的。</li></ul></li></ol><hr><p>领域特定语言（DSL）的两种类型：外部DSL和内部DSL。</p><ol><li><strong>外部DSL</strong>：这种DSL是完全独立的语言，有自己的语法和语义。它不依赖于任何宿主语言，可以独立运行。外部DSL通常需要更多的开发工作，因为它需要从头开始构建整个语言的语法、解析器、编译器等。</li><li><strong>内部DSL</strong>：这种DSL是嵌入在宿主语言（如Java、Python等）中的，它使用宿主语言的语法和语义，但专注于特定领域的表达。内部DSL的开发成本相对较低，因为它可以利用宿主语言的基础设施，如编译器、开发工具等。</li></ol><p>内部DSL相对于外部DSL的优势：</p><ul><li><strong>开发成本更低</strong>：因为内部DSL可以利用宿主语言的现有资源，所以开发和维护起来更加经济。</li><li><strong>与日常工作结合得更加紧密</strong>：由于内部DSL使用宿主语言的语法，对于已经熟悉宿主语言的开发者来说，学习和使用内部DSL更加容易，可以更自然地融入到日常工作流程中。</li></ul><hr><h2 id="二、知识图谱增强与多模态融合"><a href="#二、知识图谱增强与多模态融合" class="headerlink" title="二、知识图谱增强与多模态融合"></a>二、知识图谱增强与多模态融合</h2><p><strong>知识图谱（Knowledge Graph）</strong></p><ul><li><strong>定义</strong>：知识图谱是一种结构化的语义知识库，它通过图的形式存储实体（节点）和它们之间的关系（边）。这种图结构使得知识图谱能够表示复杂的关系和属性，便于进行知识推理和查询。</li><li><strong>应用</strong>：知识图谱常用于提供实体识别、关系抽取、语义搜索等功能。在图像识别中，知识图谱可以用来识别图像中的实体，并将其与已知的信息关联起来。</li></ul><p><strong>知识库（Knowledge Base）</strong></p><ul><li><strong>定义</strong>：知识库是存储知识的集合，它可以是结构化的（如数据库）或半结构化的（如文件系统）。知识库可以包含各种类型的数据，如文本、图像、视频等。</li><li><strong>应用</strong>：知识库可以用于支持决策、提供背景信息、辅助数据分析等。在多模态数据融合中，知识库可以提供不同模态数据之间的关联信息。</li></ul><h3 id="1-知识图谱在Text-to-SQL中的应用"><a href="#1-知识图谱在Text-to-SQL中的应用" class="headerlink" title="1. 知识图谱在Text-to-SQL中的应用"></a>1. 知识图谱在Text-to-SQL中的应用</h3><p><strong>优势：</strong></p><ul><li><strong>增强语义理解能力</strong>：知识图谱通过实体和关系的结构化表示，可以提供更丰富的语义信息，帮助模型更好地理解查询中的实体和它们之间的关系。</li><li><strong>提升模型泛化性</strong>：知识图谱可以提供跨领域的知识，有助于模型在不同数据库和领域之间进行泛化。</li><li><strong>改善实体链接精确度</strong>：在自然语言查询中，用户可能会提到一些特定的实体，知识图谱可以帮助模型将这些实体与数据库中的相应条目进行链接。</li><li><strong>支持复杂查询推理</strong>：知识图谱中的关系可以用于推理，帮助模型生成更复杂的查询，例如那些需要多跳推理的查询。</li><li><strong>提高系统鲁棒性</strong>：知识图谱可以减少对训练数据的依赖，提高模型在面对未见过的查询或数据库结构时的鲁棒性。</li><li><strong>支持多模态信息融合</strong>：知识图谱可以整合来自不同来源的信息，包括文本、图像等，为Text-to-SQL任务提供更全面的上下文。</li></ul><p><strong>挑战：</strong></p><ul><li><strong>构建和维护成本高</strong>：高质量的知识图谱需要大量的工作来构建和维护。</li><li><strong>动态信息更新困难</strong>：知识图谱可能难以及时更新以反映数据库中的最新变化。</li><li><strong>系统复杂度增加</strong>：集成知识图谱可能会增加系统的复杂性，需要额外的算法来处理图结构数据。</li></ul><h3 id="2-多模态数据融合技术"><a href="#2-多模态数据融合技术" class="headerlink" title="2. 多模态数据融合技术"></a>2. 多模态数据融合技术</h3><h4 id="1-图像识别"><a href="#1-图像识别" class="headerlink" title="1. 图像识别"></a>1. 图像识别</h4><p><strong>目的</strong>：识别图像中的对象、场景或活动。</p><p><strong>应用实例</strong>：通过知识图谱提供的信息，识别“这幅画是谁画的？”</p><ul><li>工作流程<ol><li><strong>图像处理</strong>：使用计算机视觉技术（如卷积神经网络CNN）来识别图像中的视觉特征。</li><li><strong>特征提取</strong>：从图像中提取关键特征，如颜色、形状、纹理等。</li><li><strong>知识图谱匹配</strong>：将提取的特征与知识图谱中的实体进行匹配，以确定图像中的对象或场景。</li><li><strong>结果输出</strong>：输出识别结果，例如“这幅画是梵高画的”。</li></ol></li></ul><h4 id="2-语音识别"><a href="#2-语音识别" class="headerlink" title="2. 语音识别"></a>2. 语音识别</h4><p><strong>目的</strong>：将语音信号转换为文本数据。</p><p><strong>应用实例</strong>：通过语音识别查询“我要查询天气预报”。</p><ul><li>工作流程<ol><li><strong>语音采集</strong>：通过麦克风等设备采集语音信号。</li><li><strong>语音预处理</strong>：对语音信号进行降噪、分割等处理。</li><li><strong>特征提取</strong>：提取语音特征，如梅尔频率倒谱系数（MFCC）。</li><li><strong>模型识别</strong>：使用深度学习模型（如循环神经网络RNN）将语音特征转换为文本。</li><li><strong>结果输出</strong>：输出识别的文本，例如“我要查询天气预报”。</li></ol></li></ul><h4 id="3-情感分析"><a href="#3-情感分析" class="headerlink" title="3. 情感分析"></a>3. 情感分析</h4><p><strong>目的</strong>：分析文本中的情感倾向，如正面、负面或中性。</p><p><strong>应用实例</strong>：判断“这篇文章的评价是正面的还是负面的？”</p><ul><li>工作流程<ol><li><strong>文本预处理</strong>：对文本进行分词、去除停用词等处理。</li><li><strong>特征提取</strong>：提取文本特征，如词袋模型、TF-IDF等。</li><li><strong>情感分类</strong>：使用机器学习或深度学习模型对情感进行分类。</li><li><strong>结果输出</strong>：输出情感分析结果，例如“这篇文章的评价是正面的”。</li></ol></li></ul><h3 id="3-知识库与知识图谱的协同"><a href="#3-知识库与知识图谱的协同" class="headerlink" title="3. 知识库与知识图谱的协同"></a>3. 知识库与知识图谱的协同</h3><p><strong>知识图谱特点：</strong></p><ul><li>结构化的语义知识表示</li><li>支持实体关系推理</li><li>便于知识查询和检索</li></ul><p><strong>知识库功能：</strong></p><ul><li>支持多种数据类型存储</li><li>提供丰富的背景信息</li><li>辅助决策分析</li></ul><p><strong>步骤：</strong></p><ol><li><strong>知识库构建</strong>：构建包含实体和关系的大规模知识库。</li><li><strong>数据采集</strong>：采集多模态数据，如图像、文本等。</li><li><strong>特征提取</strong>：从多模态数据中提取特征。</li><li><strong>匹配</strong>：<ul><li><strong>知识图谱匹配</strong>：将提取的特征与知识图谱中的实体进行匹配，以确定图像中的对象或场景。例如，通过图像识别技术提取的特征与知识图谱中的实体（如“梵高”）进行匹配，以识别出图像中的画家。</li><li><strong>知识库匹配</strong>：将提取的特征与知识库中的信息进行匹配，以整合不同模态的数据。例如，将语音识别结果与知识库中的天气信息进行匹配，以提供天气预报服务。</li></ul></li><li><strong>数据整合</strong>：将匹配后的信息整合在一起，形成更全面的知识表示。</li><li><strong>知识推理</strong>：利用知识库中的信息进行推理，以提供更全面的理解。</li><li><strong>结果输出</strong>：输出融合后的结果，例如“这幅画是梵高画的，画中的场景是星空”。</li></ol><h2 id="三、未来展望"><a href="#三、未来展望" class="headerlink" title="三、未来展望"></a>三、未来展望</h2><p>随着技术的不断发展，我们可以期待：</p><ol><li>更智能的对话系统，能够理解更复杂的用户意图</li><li>更高效的知识融合方案，实现真正的多模态智能交互</li><li>更完善的知识图谱生态，支持更广泛的应用场景</li></ol><p>智能对话系统和知识融合技术的发展将继续推动人工智能向着更加智能和实用的方向发展，为用户提供更优质的智能服务体验。</p><h2 id="参考架构图"><a href="#参考架构图" class="headerlink" title="参考架构图"></a>参考架构图</h2><img src="/posts/172b526/fd035eb018fc64702f4482c74f4bb10b520c0d5d.png" class="" title="图片描述"><img src="/posts/172b526/62873a531e111a5146a937b1d3383d0181c26bf3.png" class="" title="图片描述">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;智能对话系统与知识融合技术探析&quot;&gt;&lt;a href=&quot;#智能对话系统与知识融合技术探析&quot; class=&quot;headerlink&quot; title=&quot;智能对话系统与知识融合技术探析&quot;&gt;&lt;/a&gt;智能对话系统与知识融合技术探析&lt;/h1&gt;&lt;p&gt;在人工智能快速发展的今天，智能对话系</summary>
      
    
    
    
    
    <category term="AI" scheme="https://xtaiyang.github.io/tags/AI/"/>
    
    <category term="NLP" scheme="https://xtaiyang.github.io/tags/NLP/"/>
    
  </entry>
  
</feed>
